{"version":3,"sources":["constants/index.js","assets/logo.svg","utilities/index.js","components/header/index.js","components/display/index.js","components/button/index.js","components/calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","BASE_LAYOUT","ERROR","text","module","exports","p","calculatorActionHandler","_constants__WEBPACK_IMPORTED_MODULE_0__","currentExpression","newAction","slice","evaluateExpression","expression","result","eval","Number","isFinite","Math","abs","error","Header","props","react_default","a","createElement","className","alt","src","logo","Display","displayedText","Button","onClick","disabled","children","Calculator","_useState","useState","_useState2","Object","slicedToArray","calculatorValue","setCalculatorValue","onClickHandler","event","target","innerText","components_display","map","btn","components_button","key","App","components_header","components_calculator","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAO,IAAMD,EAAc,CACzB,CAAEE,KAAM,KACR,CAAEA,KAAM,MACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,KACR,CAAEA,KAAM,MAGGD,EAAQ,8BCvBrBE,EAAAC,QAAiBP,EAAAQ,EAAuB,wGCAxCR,oBAAAC,EAAAC,oBAAA,sBAAAO,0BAAA,IAAAC,wCAAAV,oBAAA,GAEaS,wBAA0B,SAACE,EAAmBC,GACzD,OAAQA,GACN,IAAK,KACH,MAAO,GACT,IAAK,IACH,OAAOD,EAAkBE,MAAM,GAAI,GACrC,IAAK,IACH,OAAQF,GAAqB,KAAOC,EACtC,IAAK,IACH,OAAOE,mBAAmBH,GAC5B,QACE,OAAOA,EAAoBC,IAIpBE,mBAAqB,SAArBA,mBAAqBC,YAChC,IACE,IAAMC,OAASC,KAAKF,YACpB,OAAQG,OAAOC,SAASC,KAAKC,IAAIL,SAAmBA,OAARZ,0CAC5C,MAAOkB,OACP,OAAOlB,+UCZImB,EANA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,gBAAgBC,IAAKC,IAAMH,UAAU,kBCGnCI,eANC,SAAAR,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,YAAOH,EAAMS,eAAiB,QCQnBC,SAVA,SAAAV,GAAK,OAClBC,EAAAC,EAAAC,cAAA,UACEQ,QAASX,EAAMW,QACfP,UAAU,iBACVQ,SAAUZ,EAAMY,UAEfZ,EAAMa,0BCuBIC,EAzBI,SAAAd,GAAS,IAAAe,EACoBC,mBAAS,IAD7BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBK,EADmBH,EAAA,GACFI,EADEJ,EAAA,GAEpBK,EAAiB,SAAAC,GACrBF,EACEpC,YAAwBmC,EAAiBG,EAAMC,OAAOC,aAG1D,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAACuB,EAAD,CAASjB,cAAeW,IACxBnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZzB,IAAYgD,IAAI,SAAAC,GAAG,OAClB3B,EAAAC,EAAAC,cAAC0B,EAAD,CACEC,IAAKF,EAAI/C,KACT8B,QAASW,EACTV,SAAUQ,IAAoBxC,KAAsB,OAAbgD,EAAI/C,MAE1C+C,EAAI/C,WCRFkD,0LATX,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAC8B,EAAD,cALUC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a8abe579.chunk.js","sourcesContent":["export const BASE_LAYOUT = [\n  { text: '(' },\n  { text: 'CE' },\n  { text: ')' },\n  { text: 'C' },\n  { text: '7' },\n  { text: '8' },\n  { text: '9' },\n  { text: '/' },\n  { text: '4' },\n  { text: '5' },\n  { text: '6' },\n  { text: '*' },\n  { text: '1' },\n  { text: '2' },\n  { text: '3' },\n  { text: '-' },\n  { text: '.' },\n  { text: '0' },\n  { text: '=' },\n  { text: '+' },\n]\n\nexport const ERROR = 'Error'\n","module.exports = __webpack_public_path__ + \"static/media/logo.d98a6a66.svg\";","import { ERROR } from '../constants'\n\nexport const calculatorActionHandler = (currentExpression, newAction) => {\n  switch (newAction) {\n    case 'CE':\n      return ''\n    case 'C':\n      return currentExpression.slice(0, -1)\n    case '.':\n      return (currentExpression || '0') + newAction\n    case '=':\n      return evaluateExpression(currentExpression)\n    default:\n      return currentExpression + newAction\n  }\n}\n\nexport const evaluateExpression = expression => {\n  try {\n    const result = eval(expression)\n    return !Number.isFinite(Math.abs(result)) ? ERROR : result\n  } catch (error) {\n    return ERROR\n  }\n}\n","import React from 'react'\nimport './header.css'\nimport logo from '../../assets/logo.svg'\n\nconst Header = props => (\n  <div className='app-header'>\n    <img alt='equal experts' src={logo} className='logo' />\n  </div>\n)\n\nexport default Header\n","import React from 'react'\nimport './display.css'\n\nconst Display = props => (\n  <div className='display-container'>\n    <span>{props.displayedText || '0'}</span>\n  </div>\n)\n\nexport default Display\n","import React from 'react'\nimport './button.css'\n\nconst Button = props => (\n  <button\n    onClick={props.onClick}\n    className='calculator-btn'\n    disabled={props.disabled}\n  >\n    {props.children}\n  </button>\n)\n\nexport default Button\n","import React, { useState } from 'react'\nimport './calculator.css'\nimport Display from '../display'\nimport Button from '../button'\nimport { BASE_LAYOUT, ERROR } from '../../constants'\nimport { calculatorActionHandler } from '../../utilities'\n\nconst Calculator = props => {\n  const [calculatorValue, setCalculatorValue] = useState('')\n  const onClickHandler = event => {\n    setCalculatorValue(\n      calculatorActionHandler(calculatorValue, event.target.innerText),\n    )\n  }\n  return (\n    <div className='calculator-container'>\n      <Display displayedText={calculatorValue} />\n      <div className='calculator-buttons'>\n        {BASE_LAYOUT.map(btn => (\n          <Button\n            key={btn.text}\n            onClick={onClickHandler}\n            disabled={calculatorValue === ERROR && btn.text !== 'CE'}\n          >\n            {btn.text}\n          </Button>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Calculator\n","import React, { Component } from 'react'\nimport Header from './components/header'\nimport Calculator from './components/calculator'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='app'>\n        <Header />\n        <Calculator />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}